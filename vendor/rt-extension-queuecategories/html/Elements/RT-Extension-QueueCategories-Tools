<%method GroupHeader>
	<tr>
		<th colspan="<%$Span+1%>">&nbsp;</th>
	</tr>

	<tr>
		<th class="collection-as-table" colspan="<%$Span+1%>"><%$headerId%></th>
	</tr>
	<%init>

		if (exists($struct->{$Queue})) {

			my $groupName = $struct->{$Queue};
			if ($headerId && $headerId eq $groupName) {
				return;
			} else {
				$headerId = $groupName;
			}

		} else {
			return;
		}
	</%init>
	<%args>
		$Queue => ''
		$Span => 4
	</%args>
</%method>

<%method GroupLabel>
%	if ($headerId) {
	</optgroup>
% 	}
	<optgroup label="<%$headerId%>">
	<%init>

		if (exists($struct->{$Queue})) {

			my $groupName = $struct->{$Queue};
			if ($headerId && $headerId eq $groupName) {
				return;
			} else {
				$headerId = $groupName;
			}

		} else {
			return;
		}
	</%init>
	<%args>
		$Queue => ''
		$Span => 4
	</%args>
</%method>

<%method SortQueueArray>
	<%init>
		my @new = ();
		my %seen = ();

		return unless (ref($ref) eq 'ARRAY');

		foreach my $item(@{$ref}) {
			foreach my $id(@{ $item->{'items'} }) {

				foreach my $queue (@{ $Queues }) {

					my $queueName = undef;

					if (ref($queue) eq 'RT::Queue') {
						$queueName = $queue->Name;
					} elsif (ref($queue) eq 'HASH') {
						$queueName = $queue->{Name};
					}

					if ($queueName eq $id) {
						push @new, $queue;
						$seen{$queueName} = 1;
					}
				}

			}
		}

		foreach my $queue (@{ $Queues }) {
			my $queueName = undef;

			if (ref($queue) eq 'RT::Queue') {
				$queueName = $queue->Name;
			} elsif (ref($queue) eq 'HASH') {
				$queueName = $queue->{Name};
			}

			unless (exists($seen{$queueName})) {
				splice(@new, 0, 0, $queue);
			}
		}

		@{ $Queues } = @new;
	</%init>
	<%args>
		$Queues => ()
	</%args>
</%method>

<%method Reset>
	<%init>
		$headerId = undef;
	</%init>
</%method>

<%once>
	use Data::Dumper;
	use subs qw(BuildQueueStruct);

	my $ref = [];

	my $struct = {};

	my $headerId = undef;

	BuildQueueStruct($ref, $struct);

	sub BuildQueueStruct {
		my $systemUser = RT->SystemUser;
		my $ref = shift;
		my $struct = shift;
		my $cf = RT->Config->Get('QueueCategories_CFName') // 'QueueCategory';
		my %queueCategories = ();

		my %queuesOrder = ();
		my $queuesSearch = RT::Queues->new($systemUser);
		$queuesSearch->LimitToEnabled;
		while (my $queue = $queuesSearch->Next) {
			my $queueCategory = $queue->FirstCustomFieldValue($cf);
			next unless (defined $queueCategory);

			$struct->{$queue->Name} = $queueCategory;
			$queueCategories{$queueCategory} = [] unless (exists $queueCategories{$queueCategory});
			push @{$queueCategories{$queueCategory}}, $queue->Name;
			$queuesOrder{$queue->Name} = $queue->SortOrder
		}

		my %valuesOrder = ();
		my $field = RT::CustomField->new($systemUser);
		$field->LoadByName(Name => $cf, ObjectType => 'RT::Queue', IncludeDisabled => 0, IncludeGlobal => 1);
		my $valuesSearch = $field->Values;

		while (my $value = $valuesSearch->Next) {
			$valuesOrder{$value->Name} = $value->SortOrder
		}

		for my $queueCategory (sort { ($valuesOrder{$a} // 0) <=> (($valuesOrder{$b} // 0) || $a cmp $b) } keys %queueCategories) {
			push @$ref, {
				name  => $queueCategory,
				items => [sort { ($queuesOrder{$a} // 0) <=> (($queuesOrder{$b} // 0) || $a cmp $b) } @{$queueCategories{$queueCategory}}]
			}
		}
	}
</%once>
